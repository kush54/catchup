{"ast":null,"code":"import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{fetchCount}from'./counterAPI';const initialState={value:0,status:'idle'};// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync=createAsyncThunk('counter/fetchCount',async amount=>{const response=await fetchCount(amount);// The value we return becomes the `fulfilled` action payload\nreturn response.data;});export const counterSlice=createSlice({name:'counter',initialState,// The `reducers` field lets us define reducers and generate associated actions\nreducers:{increment:state=>{// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.value+=1;},decrement:state=>{state.value-=1;},// Use the PayloadAction type to declare the contents of `action.payload`\nincrementByAmount:(state,action)=>{state.value+=action.payload;}},// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\nextraReducers:builder=>{builder.addCase(incrementAsync.pending,state=>{state.status='loading';}).addCase(incrementAsync.fulfilled,(state,action)=>{state.status='idle';state.value+=action.payload;});}});export const{increment,decrement,incrementByAmount}=counterSlice.actions;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount=state=>state.counter.value;// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd=amount=>(dispatch,getState)=>{const currentValue=selectCount(getState());if(currentValue%2===1){dispatch(incrementByAmount(amount));}};export default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["C:/Users/kuljeet/Desktop/catchup-final/client/my-app/src/features/counter/counterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,OAASA,gBAAgB,CAAEC,WAAW,KAAQ,kBAAkB,CAChE,OAASC,UAAU,KAAQ,cAAc,CAEzC,KAAM,CAAAC,YAAY,CAAG,CACnBC,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,MACV,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,MAAO,MAAM,CAAAC,cAAc,CAAGN,gBAAgB,CAC5C,oBAAoB,CACpB,KAAO,CAAAO,MAAM,EAAK,CAChB,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,UAAU,CAACK,MAAM,CAAC,CACzC;AACA,MAAO,CAAAC,QAAQ,CAACC,IAAI,CACtB,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,CAAGT,WAAW,CAAC,CACtCU,IAAI,CAAE,SAAS,CACfR,YAAY,CACZ;AACAS,QAAQ,CAAE,CACRC,SAAS,CAAGC,KAAK,EAAK,CACpB;AACA;AACA;AACA;AACAA,KAAK,CAACV,KAAK,EAAI,CAAC,CAClB,CAAC,CACDW,SAAS,CAAGD,KAAK,EAAK,CACpBA,KAAK,CAACV,KAAK,EAAI,CAAC,CAClB,CAAC,CACD;AACAY,iBAAiB,CAAEA,CAACF,KAAK,CAAEG,MAAM,GAAK,CACpCH,KAAK,CAACV,KAAK,EAAIa,MAAM,CAACC,OAAO,CAC/B,CACF,CAAC,CACD;AACA;AACAC,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CACJC,OAAO,CAACf,cAAc,CAACgB,OAAO,CAAGR,KAAK,EAAK,CAC1CA,KAAK,CAACT,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACDgB,OAAO,CAACf,cAAc,CAACiB,SAAS,CAAE,CAACT,KAAK,CAAEG,MAAM,GAAK,CACpDH,KAAK,CAACT,MAAM,CAAG,MAAM,CACrBS,KAAK,CAACV,KAAK,EAAIa,MAAM,CAACC,OAAO,CAC/B,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEL,SAAS,CAAEE,SAAS,CAAEC,iBAAkB,CAAC,CAAGN,YAAY,CAACc,OAAO,CAE/E;AACA;AACA;AACA,MAAO,MAAM,CAAAC,WAAW,CAAIX,KAAK,EAAKA,KAAK,CAACY,OAAO,CAACtB,KAAK,CAEzD;AACA;AACA,MAAO,MAAM,CAAAuB,cAAc,CAAIpB,MAAM,EAAK,CAACqB,QAAQ,CAAEC,QAAQ,GAAK,CAChE,KAAM,CAAAC,YAAY,CAAGL,WAAW,CAACI,QAAQ,CAAC,CAAC,CAAC,CAC5C,GAAIC,YAAY,CAAG,CAAC,GAAK,CAAC,CAAE,CAC1BF,QAAQ,CAACZ,iBAAiB,CAACT,MAAM,CAAC,CAAC,CACrC,CACF,CAAC,CAED,cAAe,CAAAG,YAAY,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}